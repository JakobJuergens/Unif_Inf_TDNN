library{roxygen2}
library(roxygen2)
library(devtools)
install.packages("devtools")
library(devtools)
roxygenize
roxygenize()
roxygenise()
roxygenise()
use_gpl_license()
roxygenise()
usethis::use_testthat(3)
use_test()
install.packages("available")
roxygenise()
roxygenise()
available('tdnnR')
available::available('tdnnR')
roxygenise()
#' Calculate the distance between two points of interest
#'
#' @param x Point A of interest
#' @param y Point B of interest
#' @return A number.
dist <- function(x, y){
sqrt((x-y)^2)
}
dist(x = c(0,0,0), y = c(1,1,1))
#' Calculate the distance between two points of interest
#'
#' @param x Point A of interest
#' @param y Point B of interest
#' @return A number.
dist <- function(x, y){
sqrt(sum((x-y)^2))
}
dist(x = c(0,0,0), y = c(1,1,1))
dist(x = c(0,0,0), y = c(1,1,1))^2
roxygenise()
roxygenise()
roxygenise()
devtools::check()
devtools::check()
roxygenise()
roxygenise()
testthat::test_check()
testthat::test_package()
roxygenise()
roxygenise()
?choose
factor <-  1
factor*(2/1)
factor*(3/2)
factor*(2/1)*(3/2)
factor*(2/1)*(3/2)*(4/3)
s <- 3
s <- 5
n <- 10
choose(n-2, s-1)
choose(n-1, s-1)
res <- 0
factor <- 1
prefactor <- 1/choose(n,s)
for(i in 1:(n-s+1)){
index <- n-s+2-i
#res <- res + factor*data_sorted[index,1]
factor <- factor*(index/(index - s + 1))
}
factor
res <- 0
factor <- 1
prefactor <- 1/choose(n,s)
for(i in 1:(n-s+1)){
(index <- n-s+2-i)
#res <- res + factor*data_sorted[index,1]
(factor <- factor*(index/(index - s + 1)))
}
res <- 0
factor <- 1
prefactor <- 1/choose(n,s)
for(i in 1:(n-s+1)){
index <- n-s+2-i
#res <- res + factor*data_sorted[index,1]
factor <- factor*(index/(index - s + 1))
print(factor)
}
res <- 0
factor <- 1
prefactor <- 1/choose(n,s)
for(i in 1:(n-s+1)){
index <- n-s+2-i
#res <- res + factor*data_sorted[index,1]
factor <- factor*(index/(index - s + 1))
print(index)
print(factor)
}
res <- 0
factor <- 1
prefactor <- 1/choose(n,s)
for(i in 1:(n-s+1)){
index <- n-s+2-i
#res <- res + factor*data_sorted[index,1]
factor <- factor*((n-index)/(n-(index - s + 1)))
print(index)
print(factor)
}
res <- 0
factor <- 1
prefactor <- 1/choose(n,s)
for(i in 1:(n-s+1)){
index <- n-s+2-i
#res <- res + factor*data_sorted[index,1]
factor <- factor*((n-index)/(index - s + 1))
print(index)
print(factor)
}
res <- 0
factor <- 1
prefactor <- 1/choose(n,s)
for(i in 1:(n-s+1)){
index <- n-s+2-i
#res <- res + factor*data_sorted[index,1]
factor <- factor*((n-index)/(index))
print(index)
print(factor)
}
res <- 0
factor <- 1
prefactor <- 1/choose(n,s)
for(i in 1:(n-s+1)){
index <- n-s+2-i
#res <- res + factor*data_sorted[index,1]
factor <- factor*((n-index)/(n - index - s + 1))
print(index)
print(factor)
}
res <- 0
factor <- 1
prefactor <- 1/choose(n,s)
for(i in 1:(n-s+1)){
index <- n-s+2-i
#res <- res + factor*data_sorted[index,1]
factor <- factor*((n-index)/(n - index - s + 1))
print(index)
print(factor)
}
# Calculate DNN estimator
res <- 0
factor <- 1
prefactor <- 1/choose(n,s)
for(i in 1:(n-s+1)){
index <- n-s+2-i
#res <- res + factor*data_sorted[index,1]
factor <- factor*((n-index)/(n - index - s + 2))
print(index)
print(factor)
}
choose(n-1, s-1)
res <- 0
factor <- 1
prefactor <- 1/choose(n,s)
for(i in 1:(n-s+1)){
print(factor)
index <- n-s+2-i
#res <- res + factor*data_sorted[index,1]
factor <- factor*((n-index)/(n - index - s + 2))
}
choose(9, 4)
choose(n - n + s - 1, s-1)
choose(n - n + s - 2, s-1)
choose(n - n + s, s-1)
factor <- 1
prefactor <- 1/choose(n,s)
for(i in 1:(n-s+1)){
print(factor)
index <- n-s+2-i
#res <- res + factor*data_sorted[index,1]
factor <- factor*((n-index+1)/(n - index - s + 2))
}
