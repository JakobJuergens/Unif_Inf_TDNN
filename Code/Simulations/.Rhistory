# General Setup
n_obs <- 100000
# Generate Covariates
cov_dim <- 2
cov_mat <- matrix(data = runif(n = n_obs*cov_dim, 0, 1), nrow = n_obs, ncol = cov_dim)
# Calculate Response Values
responses <- rep(NA, times = n_obs)
reg_f <- function(covariates){
return(sum(cos(5*covariates)))
}
htscty_f <- function(covariates){
return(0.25*abs(sum(covariates)))
}
reg_vals <- unlist(
purrr::map(.f = ~ reg_f(cov_mat[.x, ]), .x = 1:n_obs))
responses <- unlist(
purrr::map(.f = ~ reg_f(cov_mat[.x, ] + rnorm(n = 1, mean = 0, sd = htscty_f(cov_mat[.x, ]))),
.x = 1:n_obs)
)
if(run_plots == TRUE){
# Create data-frame for plotting purposes
plot_df <- as_tibble(expand.grid(seq(0,1,0.01), seq(0,1,0.01)))
plot_df$reg_vals <- unlist(purrr::map(.f = ~ reg_f(plot_df[.x,]), .x = 1:nrow(plot_df)))
plot_df$var_vals <- unlist(purrr::map(.f = ~ htscty_f(plot_df[.x,]), .x = 1:nrow(plot_df)))
# Plot response surface
reg_plot <- ggplot(data = plot_df) +
geom_contour_fill(aes(x = Var1, y = Var2, z = reg_vals),
bins = 100) +
scale_fill_distiller(palette = "Spectral") +
xlab("Covariate 1") + ylab("Covariate 2") + labs(fill = 'Value of Regression Function') +
theme_light() +
theme(legend.position="bottom", legend.key.size = unit(1.5, 'cm'),
text = element_text(size = 16))
# Plot Heteroskedasticity
var_plot <- ggplot(data = plot_df) +
geom_contour_fill(aes(x = Var1, y = Var2, z = var_vals),
bins = 100) +
scale_fill_distiller(palette='RdBu', direction=-1) +
xlab("Covariate 1") + ylab(element_blank()) + labs(fill = 'Error Term Variance') +
theme_light() +
theme(legend.position="bottom", legend.key.size = unit(1.5, 'cm'),
text = element_text(size = 16))
# Combine Plots for Paper
comb_plot <- reg_plot + var_plot
ggsave(filename = '../../Graphics/Reg_Exmp1.pdf', plot = comb_plot,
width = 16, height = 6, units = 'in')
}
# Estimation Procedure
data_mat <- cbind(responses, cov_mat)
x <- c(0.2, 0.2)
est <- tdnnR::TDNN(x = x, data = data_mat, s1 = 10, s2 = 20,
presorted = FALSE, standardize = FALSE, asymp_approx_weights = FALSE)
value <- reg_f(x)
# Load packages from CRAN
library(tidyverse)
library(patchwork)
library(metR)
# Load my DNN package
install.packages("D:/Jakob_Clouds/dropbox/Research/Individual_Projects/U_Statistics/Unif_Inf_TDNN/Code/tdnnR_0.1.0.tar.gz")
library(tdnnR)
# General Setup
n_obs <- 100000
# Generate Covariates
cov_dim <- 2
cov_mat <- matrix(data = runif(n = n_obs*cov_dim, 0, 1), nrow = n_obs, ncol = cov_dim)
# Calculate Response Values
responses <- rep(NA, times = n_obs)
reg_f <- function(covariates){
return(sum(cos(5*covariates)))
}
htscty_f <- function(covariates){
return(0.25*abs(sum(covariates)))
}
reg_vals <- unlist(
purrr::map(.f = ~ reg_f(cov_mat[.x, ]), .x = 1:n_obs))
responses <- unlist(
purrr::map(.f = ~ reg_f(cov_mat[.x, ] + rnorm(n = 1, mean = 0, sd = htscty_f(cov_mat[.x, ]))),
.x = 1:n_obs)
)
if(run_plots == TRUE){
# Create data-frame for plotting purposes
plot_df <- as_tibble(expand.grid(seq(0,1,0.01), seq(0,1,0.01)))
plot_df$reg_vals <- unlist(purrr::map(.f = ~ reg_f(plot_df[.x,]), .x = 1:nrow(plot_df)))
plot_df$var_vals <- unlist(purrr::map(.f = ~ htscty_f(plot_df[.x,]), .x = 1:nrow(plot_df)))
# Plot response surface
reg_plot <- ggplot(data = plot_df) +
geom_contour_fill(aes(x = Var1, y = Var2, z = reg_vals),
bins = 100) +
scale_fill_distiller(palette = "Spectral") +
xlab("Covariate 1") + ylab("Covariate 2") + labs(fill = 'Value of Regression Function') +
theme_light() +
theme(legend.position="bottom", legend.key.size = unit(1.5, 'cm'),
text = element_text(size = 16))
# Plot Heteroskedasticity
var_plot <- ggplot(data = plot_df) +
geom_contour_fill(aes(x = Var1, y = Var2, z = var_vals),
bins = 100) +
scale_fill_distiller(palette='RdBu', direction=-1) +
xlab("Covariate 1") + ylab(element_blank()) + labs(fill = 'Error Term Variance') +
theme_light() +
theme(legend.position="bottom", legend.key.size = unit(1.5, 'cm'),
text = element_text(size = 16))
# Combine Plots for Paper
comb_plot <- reg_plot + var_plot
ggsave(filename = '../../Graphics/Reg_Exmp1.pdf', plot = comb_plot,
width = 16, height = 6, units = 'in')
}
# Estimation Procedure
data_mat <- cbind(responses, cov_mat)
x <- c(0.2, 0.2)
est <- tdnnR::TDNN(x = x, data = data_mat, s1 = 10, s2 = 50,
presorted = FALSE, standardize = FALSE, asymp_approx_weights = FALSE)
value <- reg_f(x)
# Load packages from CRAN
library(tidyverse)
library(patchwork)
library(metR)
# Load my DNN package
install.packages("D:/Jakob_Clouds/dropbox/Research/Individual_Projects/U_Statistics/Unif_Inf_TDNN/Code/tdnnR_0.1.0.tar.gz")
library(tdnnR)
# General Setup
n_obs <- 100000
# Generate Covariates
cov_dim <- 2
cov_mat <- matrix(data = runif(n = n_obs*cov_dim, 0, 1), nrow = n_obs, ncol = cov_dim)
# Calculate Response Values
responses <- rep(NA, times = n_obs)
reg_f <- function(covariates){
return(sum(cos(5*covariates)))
}
htscty_f <- function(covariates){
return(0.25*abs(sum(covariates)))
}
reg_vals <- unlist(
purrr::map(.f = ~ reg_f(cov_mat[.x, ]), .x = 1:n_obs))
responses <- unlist(
purrr::map(.f = ~ reg_f(cov_mat[.x, ] + rnorm(n = 1, mean = 0, sd = htscty_f(cov_mat[.x, ]))),
.x = 1:n_obs)
)
if(run_plots == TRUE){
# Create data-frame for plotting purposes
plot_df <- as_tibble(expand.grid(seq(0,1,0.01), seq(0,1,0.01)))
plot_df$reg_vals <- unlist(purrr::map(.f = ~ reg_f(plot_df[.x,]), .x = 1:nrow(plot_df)))
plot_df$var_vals <- unlist(purrr::map(.f = ~ htscty_f(plot_df[.x,]), .x = 1:nrow(plot_df)))
# Plot response surface
reg_plot <- ggplot(data = plot_df) +
geom_contour_fill(aes(x = Var1, y = Var2, z = reg_vals),
bins = 100) +
scale_fill_distiller(palette = "Spectral") +
xlab("Covariate 1") + ylab("Covariate 2") + labs(fill = 'Value of Regression Function') +
theme_light() +
theme(legend.position="bottom", legend.key.size = unit(1.5, 'cm'),
text = element_text(size = 16))
# Plot Heteroskedasticity
var_plot <- ggplot(data = plot_df) +
geom_contour_fill(aes(x = Var1, y = Var2, z = var_vals),
bins = 100) +
scale_fill_distiller(palette='RdBu', direction=-1) +
xlab("Covariate 1") + ylab(element_blank()) + labs(fill = 'Error Term Variance') +
theme_light() +
theme(legend.position="bottom", legend.key.size = unit(1.5, 'cm'),
text = element_text(size = 16))
# Combine Plots for Paper
comb_plot <- reg_plot + var_plot
ggsave(filename = '../../Graphics/Reg_Exmp1.pdf', plot = comb_plot,
width = 16, height = 6, units = 'in')
}
# Estimation Procedure
data_mat <- cbind(responses, cov_mat)
x <- c(0.2, 0.2)
est <- tdnnR::TDNN(x = x, data = data_mat, s1 = 10, s2 = 50,
presorted = FALSE, standardize = FALSE, asymp_approx_weights = FALSE)
value <- reg_f(x)
# Load packages from CRAN
library(tidyverse)
library(patchwork)
library(metR)
# Load my DNN package
install.packages("D:/Jakob_Clouds/dropbox/Research/Individual_Projects/U_Statistics/Unif_Inf_TDNN/Code/tdnnR_0.1.0.tar.gz")
library(tdnnR)
# General Setup
n_obs <- 100000
# Generate Covariates
cov_dim <- 2
cov_mat <- matrix(data = runif(n = n_obs*cov_dim, 0, 1), nrow = n_obs, ncol = cov_dim)
# Calculate Response Values
responses <- rep(NA, times = n_obs)
reg_f <- function(covariates){
return(sum(cos(5*covariates)))
}
htscty_f <- function(covariates){
return(0.25*abs(sum(covariates)))
}
reg_vals <- unlist(
purrr::map(.f = ~ reg_f(cov_mat[.x, ]), .x = 1:n_obs))
responses <- unlist(
purrr::map(.f = ~ reg_f(cov_mat[.x, ] + rnorm(n = 1, mean = 0, sd = htscty_f(cov_mat[.x, ]))),
.x = 1:n_obs)
)
if(run_plots == TRUE){
# Create data-frame for plotting purposes
plot_df <- as_tibble(expand.grid(seq(0,1,0.01), seq(0,1,0.01)))
plot_df$reg_vals <- unlist(purrr::map(.f = ~ reg_f(plot_df[.x,]), .x = 1:nrow(plot_df)))
plot_df$var_vals <- unlist(purrr::map(.f = ~ htscty_f(plot_df[.x,]), .x = 1:nrow(plot_df)))
# Plot response surface
reg_plot <- ggplot(data = plot_df) +
geom_contour_fill(aes(x = Var1, y = Var2, z = reg_vals),
bins = 100) +
scale_fill_distiller(palette = "Spectral") +
xlab("Covariate 1") + ylab("Covariate 2") + labs(fill = 'Value of Regression Function') +
theme_light() +
theme(legend.position="bottom", legend.key.size = unit(1.5, 'cm'),
text = element_text(size = 16))
# Plot Heteroskedasticity
var_plot <- ggplot(data = plot_df) +
geom_contour_fill(aes(x = Var1, y = Var2, z = var_vals),
bins = 100) +
scale_fill_distiller(palette='RdBu', direction=-1) +
xlab("Covariate 1") + ylab(element_blank()) + labs(fill = 'Error Term Variance') +
theme_light() +
theme(legend.position="bottom", legend.key.size = unit(1.5, 'cm'),
text = element_text(size = 16))
# Combine Plots for Paper
comb_plot <- reg_plot + var_plot
ggsave(filename = '../../Graphics/Reg_Exmp1.pdf', plot = comb_plot,
width = 16, height = 6, units = 'in')
}
# Estimation Procedure
data_mat <- cbind(responses, cov_mat)
x <- c(0.2, 0.2)
est <- tdnnR::TDNN(x = x, data = data_mat, s1 = 10, s2 = 50,
presorted = FALSE, standardize = FALSE, asymp_approx_weights = FALSE)
value <- reg_f(x)
# Create data-frame for plotting purposes
plot_df <- as_tibble(expand.grid(seq(0,1,0.01), seq(0,1,0.01)))
plot_df$reg_vals <- unlist(purrr::map(.f = ~ reg_f(plot_df[.x,]), .x = 1:nrow(plot_df)))
plot_df$var_vals <- unlist(purrr::map(.f = ~ htscty_f(plot_df[.x,]), .x = 1:nrow(plot_df)))
# Plot response surface
reg_plot <- ggplot(data = plot_df) +
geom_contour_fill(aes(x = Var1, y = Var2, z = reg_vals),
bins = 100) +
scale_fill_distiller(palette = "Spectral") +
xlab("Covariate 1") + ylab("Covariate 2") + labs(fill = 'Value of Regression Function') +
theme_light() +
theme(legend.position="bottom", legend.key.size = unit(1.5, 'cm'),
text = element_text(size = 16))
# Plot Heteroskedasticity
var_plot <- ggplot(data = plot_df) +
geom_contour_fill(aes(x = Var1, y = Var2, z = var_vals),
bins = 100) +
scale_fill_distiller(palette='RdBu', direction=-1) +
xlab("Covariate 1") + ylab(element_blank()) + labs(fill = 'Error Term Variance') +
theme_light() +
theme(legend.position="bottom", legend.key.size = unit(1.5, 'cm'),
text = element_text(size = 16))
# Combine Plots for Paper
comb_plot <- reg_plot + var_plot
ggsave(filename = '../../Graphics/Reg_Exmp1.pdf', plot = comb_plot,
width = 16, height = 6, units = 'in')
data_mat <- cbind(responses, cov_mat)
x <- c(0.6, 0.6)
est <- tdnnR::TDNN(x = x, data = data_mat, s1 = 10, s2 = 50,
presorted = FALSE, standardize = FALSE, asymp_approx_weights = FALSE)
value <- reg_f(x)
data_mat <- cbind(responses, cov_mat)
x <- c(0.6, 0.6)
est <- tdnnR::TDNN(x = x, data = data_mat, s1 = 10, s2 = 50,
presorted = FALSE, standardize = FALSE, asymp_approx_weights = FALSE)
value <- reg_f(x)
data_mat <- cbind(responses, cov_mat)
x <- c(0.6, 0.6)
est <- tdnnR::TDNN(x = x, data = data_mat, s1 = 10, s2 = 50,
presorted = FALSE, standardize = FALSE, asymp_approx_weights = FALSE)
value <- reg_f(x)
# Load packages from CRAN
library(tidyverse)
library(patchwork)
library(metR)
# Load my DNN package
install.packages("D:/Jakob_Clouds/dropbox/Research/Individual_Projects/U_Statistics/Unif_Inf_TDNN/Code/tdnnR_0.1.0.tar.gz")
library(tdnnR)
# General Setup
n_obs <- 1000000
# Generate Covariates
cov_dim <- 2
cov_mat <- matrix(data = runif(n = n_obs*cov_dim, 0, 1), nrow = n_obs, ncol = cov_dim)
# Calculate Response Values
responses <- rep(NA, times = n_obs)
reg_f <- function(covariates){
return(sum(cos(5*covariates)))
}
htscty_f <- function(covariates){
return(0.25*abs(sum(covariates)))
}
reg_vals <- unlist(
purrr::map(.f = ~ reg_f(cov_mat[.x, ]), .x = 1:n_obs))
responses <- unlist(
purrr::map(.f = ~ reg_f(cov_mat[.x, ] + rnorm(n = 1, mean = 0, sd = htscty_f(cov_mat[.x, ]))),
.x = 1:n_obs)
)
if(run_plots == TRUE){
# Create data-frame for plotting purposes
plot_df <- as_tibble(expand.grid(seq(0,1,0.01), seq(0,1,0.01)))
plot_df$reg_vals <- unlist(purrr::map(.f = ~ reg_f(plot_df[.x,]), .x = 1:nrow(plot_df)))
plot_df$var_vals <- unlist(purrr::map(.f = ~ htscty_f(plot_df[.x,]), .x = 1:nrow(plot_df)))
# Plot response surface
reg_plot <- ggplot(data = plot_df) +
geom_contour_fill(aes(x = Var1, y = Var2, z = reg_vals),
bins = 100) +
scale_fill_distiller(palette = "Spectral") +
xlab("Covariate 1") + ylab("Covariate 2") + labs(fill = 'Value of Regression Function') +
theme_light() +
theme(legend.position="bottom", legend.key.size = unit(1.5, 'cm'),
text = element_text(size = 16))
# Plot Heteroskedasticity
var_plot <- ggplot(data = plot_df) +
geom_contour_fill(aes(x = Var1, y = Var2, z = var_vals),
bins = 100) +
scale_fill_distiller(palette='RdBu', direction=-1) +
xlab("Covariate 1") + ylab(element_blank()) + labs(fill = 'Error Term Variance') +
theme_light() +
theme(legend.position="bottom", legend.key.size = unit(1.5, 'cm'),
text = element_text(size = 16))
# Combine Plots for Paper
comb_plot <- reg_plot + var_plot
ggsave(filename = '../../Graphics/Reg_Exmp1.pdf', plot = comb_plot,
width = 16, height = 6, units = 'in')
}
# Estimation Procedure
data_mat <- cbind(responses, cov_mat)
x <- c(0.6, 0.6)
est <- tdnnR::TDNN(x = x, data = data_mat, s1 = 10, s2 = 50,
presorted = FALSE, standardize = FALSE, asymp_approx_weights = FALSE)
value <- reg_f(x)
est <- tdnnR::TDNN(x = x, data = data_mat, s1 = 20, s2 = 50,
presorted = FALSE, standardize = FALSE, asymp_approx_weights = FALSE)
value <- reg_f(x)
test <- pres_sort(x, data_mat)
test <- pre_sort(x, data_mat)
View(test)
# Estimation Procedure
data_mat <- cbind(reg_vals, responses, cov_mat)
View(data_mat)
# Load packages from CRAN
library(tidyverse)
library(patchwork)
library(metR)
# Load my DNN package
install.packages("D:/Jakob_Clouds/dropbox/Research/Individual_Projects/U_Statistics/Unif_Inf_TDNN/Code/tdnnR_0.1.0.tar.gz")
library(tdnnR)
# General Setup
n_obs <- 1000000
# Generate Covariates
cov_dim <- 2
cov_mat <- matrix(data = runif(n = n_obs*cov_dim, 0, 1), nrow = n_obs, ncol = cov_dim)
# Calculate Response Values
responses <- rep(NA, times = n_obs)
reg_f <- function(covariates){
return(sum(cos(5*covariates)))
}
htscty_f <- function(covariates){
return(0.1*abs(sum(covariates)))
}
reg_vals <- unlist(
purrr::map(.f = ~ reg_f(cov_mat[.x, ]), .x = 1:n_obs))
responses <- unlist(
purrr::map(.f = ~ reg_f(cov_mat[.x, ] + rnorm(n = 1, mean = 0, sd = htscty_f(cov_mat[.x, ]))),
.x = 1:n_obs)
)
if(run_plots == TRUE){
# Create data-frame for plotting purposes
plot_df <- as_tibble(expand.grid(seq(0,1,0.01), seq(0,1,0.01)))
plot_df$reg_vals <- unlist(purrr::map(.f = ~ reg_f(plot_df[.x,]), .x = 1:nrow(plot_df)))
plot_df$var_vals <- unlist(purrr::map(.f = ~ htscty_f(plot_df[.x,]), .x = 1:nrow(plot_df)))
# Plot response surface
reg_plot <- ggplot(data = plot_df) +
geom_contour_fill(aes(x = Var1, y = Var2, z = reg_vals),
bins = 100) +
scale_fill_distiller(palette = "Spectral") +
xlab("Covariate 1") + ylab("Covariate 2") + labs(fill = 'Value of Regression Function') +
theme_light() +
theme(legend.position="bottom", legend.key.size = unit(1.5, 'cm'),
text = element_text(size = 16))
# Plot Heteroskedasticity
var_plot <- ggplot(data = plot_df) +
geom_contour_fill(aes(x = Var1, y = Var2, z = var_vals),
bins = 100) +
scale_fill_distiller(palette='RdBu', direction=-1) +
xlab("Covariate 1") + ylab(element_blank()) + labs(fill = 'Error Term Variance') +
theme_light() +
theme(legend.position="bottom", legend.key.size = unit(1.5, 'cm'),
text = element_text(size = 16))
# Combine Plots for Paper
comb_plot <- reg_plot + var_plot
ggsave(filename = '../../Graphics/Reg_Exmp1.pdf', plot = comb_plot,
width = 16, height = 6, units = 'in')
}
# Estimation Procedure
data_mat <- cbind(reg_vals, responses, cov_mat)
x <- c(0.6, 0.6)
est <- tdnnR::TDNN(x = x, data = data_mat, s1 = 20, s2 = 50,
presorted = FALSE, standardize = FALSE, asymp_approx_weights = FALSE)
# Estimation Procedure
data_mat <- cbind(responses, cov_mat)
x <- c(0.6, 0.6)
est <- tdnnR::TDNN(x = x, data = data_mat, s1 = 20, s2 = 50,
presorted = FALSE, standardize = FALSE, asymp_approx_weights = FALSE)
value <- reg_f(x)
est <- tdnnR::TDNN(x = x, data = data_mat, s1 = 10, s2 = 50,
presorted = FALSE, standardize = FALSE, asymp_approx_weights = FALSE)
est <- tdnnR::TDNN(x = x, data = data_mat, s1 = 10, s2 = 20,
presorted = FALSE, standardize = FALSE, asymp_approx_weights = FALSE)
value <- reg_f(x)
# Create data-frame for plotting purposes
plot_df <- as_tibble(expand.grid(seq(0,1,0.01), seq(0,1,0.01)))
plot_df$reg_vals <- unlist(purrr::map(.f = ~ reg_f(plot_df[.x,]), .x = 1:nrow(plot_df)))
plot_df$var_vals <- unlist(purrr::map(.f = ~ htscty_f(plot_df[.x,]), .x = 1:nrow(plot_df)))
# Plot response surface
reg_plot <- ggplot(data = plot_df) +
geom_contour_fill(aes(x = Var1, y = Var2, z = reg_vals),
bins = 100) +
scale_fill_distiller(palette = "Spectral") +
xlab("Covariate 1") + ylab("Covariate 2") + labs(fill = 'Value of Regression Function') +
theme_light() +
theme(legend.position="bottom", legend.key.size = unit(1.5, 'cm'),
text = element_text(size = 16))
# Plot Heteroskedasticity
var_plot <- ggplot(data = plot_df) +
geom_contour_fill(aes(x = Var1, y = Var2, z = var_vals),
bins = 100) +
scale_fill_distiller(palette='RdBu', direction=-1) +
xlab("Covariate 1") + ylab(element_blank()) + labs(fill = 'Error Term Variance') +
theme_light() +
theme(legend.position="bottom", legend.key.size = unit(1.5, 'cm'),
text = element_text(size = 16))
# Combine Plots for Paper
comb_plot <- reg_plot + var_plot
ggsave(filename = '../../Graphics/Reg_Exmp1.pdf', plot = comb_plot,
width = 16, height = 6, units = 'in')
# Load packages from CRAN
library(tidyverse)
library(patchwork)
library(metR)
# Load my DNN package
install.packages("D:/Jakob_Clouds/dropbox/Research/Individual_Projects/U_Statistics/Unif_Inf_TDNN/Code/tdnnR_0.1.0.tar.gz")
library(tdnnR)
# General Setup
n_obs <- 10000000
# Generate Covariates
cov_dim <- 2
cov_mat <- matrix(data = runif(n = n_obs*cov_dim, 0, 1), nrow = n_obs, ncol = cov_dim)
# Calculate Response Values
responses <- rep(NA, times = n_obs)
reg_f <- function(covariates){
return(sum(cos(5*covariates)))
}
htscty_f <- function(covariates){
return(0.1*abs(sum(covariates)))
}
reg_vals <- unlist(
purrr::map(.f = ~ reg_f(cov_mat[.x, ]), .x = 1:n_obs))
responses <- unlist(
purrr::map(.f = ~ reg_f(cov_mat[.x, ] + rnorm(n = 1, mean = 0, sd = htscty_f(cov_mat[.x, ]))),
.x = 1:n_obs)
)
if(run_plots == TRUE){
# Create data-frame for plotting purposes
plot_df <- as_tibble(expand.grid(seq(0,1,0.01), seq(0,1,0.01)))
plot_df$reg_vals <- unlist(purrr::map(.f = ~ reg_f(plot_df[.x,]), .x = 1:nrow(plot_df)))
plot_df$var_vals <- unlist(purrr::map(.f = ~ htscty_f(plot_df[.x,]), .x = 1:nrow(plot_df)))
# Plot response surface
reg_plot <- ggplot(data = plot_df) +
geom_contour_fill(aes(x = Var1, y = Var2, z = reg_vals),
bins = 100) +
scale_fill_distiller(palette = "Spectral") +
xlab("Covariate 1") + ylab("Covariate 2") + labs(fill = 'Value of Regression Function') +
theme_light() +
theme(legend.position="bottom", legend.key.size = unit(1.5, 'cm'),
text = element_text(size = 16))
# Plot Heteroskedasticity
var_plot <- ggplot(data = plot_df) +
geom_contour_fill(aes(x = Var1, y = Var2, z = var_vals),
bins = 100) +
scale_fill_distiller(palette='RdBu', direction=-1) +
xlab("Covariate 1") + ylab(element_blank()) + labs(fill = 'Error Term Variance') +
theme_light() +
theme(legend.position="bottom", legend.key.size = unit(1.5, 'cm'),
text = element_text(size = 16))
# Combine Plots for Paper
comb_plot <- reg_plot + var_plot
ggsave(filename = '../../Graphics/Reg_Exmp1.pdf', plot = comb_plot,
width = 16, height = 6, units = 'in')
}
# Estimation Procedure
data_mat <- cbind(responses, cov_mat)
x <- c(0.6, 0.6)
est <- tdnnR::TDNN(x = x, data = data_mat, s1 = 10, s2 = 20,
presorted = FALSE, standardize = FALSE, asymp_approx_weights = FALSE)
value <- reg_f(x)
data_mat <- cbind(responses, cov_mat)
x <- c(0.4, 0.4)
est <- tdnnR::TDNN(x = x, data = data_mat, s1 = 10, s2 = 20,
presorted = FALSE, standardize = FALSE, asymp_approx_weights = FALSE)
value <- reg_f(x)
x <- c(0.1, 0.1)
est <- tdnnR::TDNN(x = x, data = data_mat, s1 = 10, s2 = 20,
presorted = FALSE, standardize = FALSE, asymp_approx_weights = FALSE)
value <- reg_f(x)
x <- c(0.9, 0.9)
est <- tdnnR::TDNN(x = x, data = data_mat, s1 = 10, s2 = 20,
presorted = FALSE, standardize = FALSE, asymp_approx_weights = FALSE)
value <- reg_f(x)
